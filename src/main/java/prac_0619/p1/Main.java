package prac_0619.p1;

public class Main {
    public static void main(String[] args) {

        /* 출력결과
        생성자 호출됨
        ==사람1 정보==
        이름 : 김철수
        나이 : 22
        생성자 호출됨
        ==사람1 정보==
        이름 : 김영희
        나이 : 22
         */

        //사람 타입의 새 객체를 만들어 그것을 사람1 변수에 연결해 컨트롤 하겠다.
        사람 사람1 = new 사람("김철수"); //new를 해서 객체를 만들 때 생성자가 호출되기에 이 시점에 "생성자 호출됨"이 출력되고
        // 생성자의 실행 내용에 따라 사람1 변수에 연결된 사람 객체의 인스턴스 변수가 초기화된다.
        System.out.println("==사람1 정보=="); //그냥 출력
        System.out.printf("이름 : %s\n", 사람1.이름); //생성자에 주어진 인자로 인해 객체 사람1의 '이름' 인스턴스 변수가 초기화되었기에 김철수가 출력된다.
        System.out.printf("나이 : %d\n", 사람1.나이); //생성자가 실행됐을 때 객체 사람 1의 '나이' 인스턴스 변수에는 22가 들어가기에 22가 출력된다.

        //사람 타입의 새 객체를 만들어 그것을 사람2 변수에 연결해 컨트롤 하겠다.
        사람 사람2 = new 사람("김영희"); //new를 해서 객체를 만들 때 만들때 생성자가 호출되기에 이 시점에 "생성자 호출됨"이 출력되고
        // 생성자의 실행 내용에 따라 사람2 변수에 연결된 사람 객체의 인스턴스 변수가 초기화된다.
        System.out.println("==사람1 정보=="); //그냥 출력
        System.out.printf("이름 : %s\n", 사람2.이름); //생성자에 들어간 인자로 인해 객체 사람2의 '이름' 인스턴스 변수가 초기화되었기에 김영희가 출력된다.
        System.out.printf("나이 : %d\n", 사람2.나이); //생성자가 실행됐을 때 객체 사람2의 '나이' 인스턴스 변수에는 22가 들어가기에 22가 출력된다.
    }
}

class 사람 { //사람 클래스
    String 이름; //사람 클래스로 인한 객체가 만들어졌을 때 그 객체가 갖게 될 String 타입의 인스턴스 변수 '이름'
    int 나이; //사람 클래스로 인한 객체가 만들어졌을 때 그 객체가 갖게 될 int 나입의 인스턴스 변수 '나이'

    사람(String 이름) { //매개변수 하나가 지정된 생성자 메소드
        System.out.println("생성자 호출됨"); //생성자 메소드가 실행되면(=사람 객체 하나가 생성되면), 출력
        this.이름 = 이름; //생성자 메소드가 실행되면(=사람 객체 하나가 생성되면), 이름 인스턴스 변수를 매개변수에 주어진 인자를 통해 초기화
        this.나이 = 22; //생성자 메소드가 실행되면(=사람 객체 하나가 생성되면), 나이 인스턴스 변수를 22로 초기화
    }
}

//참고 :
//사람 사람1 = new 김철수();
//위 코드처럼 사람에게 상속받은 김철수 객체를 생성하면
//부모의 생성자를 먼저 호출한 후 자식의 생성자를 호출한다는 규칙이 있다.
//만들어진 것은 김철수 객체이다.
//사람 생성자에서 나이를 채우고 김철수 생성자에서 이름을 채우면,
//만들어진 김철수 객체는 두가지 값이 모두 초기화 된 채 생성된다.
//단, 초기화 한 생성자가 누구인지가 다른 것.
//사람 클래스에 사람(){} 생성자, 이에 상속받는 김철수 클래스에 김철수(){}, 김철수(String name){} 생성자 2개를 만들고
//new 김철수("김철수")를 하면, 사람(){} 생성자와 김철수(String name){} 생성자가 순차적으로 동작한다.
//사람(){}는 김철수(String name){}와 형태가 안맞아도 상관이없다.
//사람 클래스에 사람(String name){}이 있어도 마찬가지로 부모 생성자를 호출할 때는 사람(){}이 호출된다.
//우리가 만든 것은 결론적으로는 김철수 객체이지 사람 객체가 아니기 때문?
//사람(String name){}을 호출하려면 부모클래스에 접근해 명시적으로 호출해줘야 한다.
//우선은 그냥 규칙으로 이해하되, 부모클래스에 접근하는 방식이 궁금하다면 super()를 알아볼 것.